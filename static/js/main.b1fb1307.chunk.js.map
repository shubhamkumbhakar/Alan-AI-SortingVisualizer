{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/AlanVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","ANIMATION_SPEED_MS","AlanVisualizer","props","state","this","resetArray","alanBtn","key","onCommand","command","mergeSort","bubbleSort","selectionSort","speed","document","getElementById","value","min","max","NUMBER_OF_ARRAY_BARS","documentElement","clientWidth","random","setState","bsanimations","getBubbleSortAnimations","animate","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","shortHeight","tallHeight","height","newHeight","className","map","idx","for","name","id","onChange","updateSpeed","selected","onClick","Component","App","ReactDOM","render"],"mappings":"8RAsDO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGA,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAflEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,E,0BCrDLgB,EAAqB,EAsOVC,M,kDA3NX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACRpB,MAAO,IAJG,E,gEASC,IAAD,OACfqB,KAAKC,aAGLC,IAAQ,CACJC,IAjBI,yEAkBJC,UAAW,YAAe,IAAbC,EAAY,EAAZA,QACM,qBAAZA,EACC,EAAKJ,aAGW,mBAAZI,EACJ,EAAKC,YAGW,oBAAZD,EACN,EAAKE,aAGa,uBAAZF,GACN,EAAKG,qB,oCASjB,IAAIC,EAAQC,SAASC,eAAe,oBACjB,SAAhBF,EAAMG,QACPhB,EAAqB,GAEJ,SAAhBa,EAAMG,QACPhB,EAAqB,GAEJ,SAAhBa,EAAMG,QACPhB,EAAqB,GAEJ,SAAhBa,EAAMG,QACPhB,EAAqB,IAEJ,UAAhBa,EAAMG,QACPhB,EAAqB,O,mCAWrB,IAHA,IAgJuBiB,EAAKC,EAhJtBnC,EAAQ,GACVoC,EAAuB1B,KAAKC,MAAOoB,SAASM,gBAAgBC,YAAa,IAAI,EAExEzB,EAAI,EAAGA,EAAIuB,EAAsBvB,IACxCb,EAAMe,MA4IemB,EA5IY,EA4IPC,EA5IU,IA8InCzB,KAAKC,MAAMD,KAAK6B,UAAYJ,EAAMD,EAAM,GAAKA,KA5IhDb,KAAKmB,SAAS,CAACxC,Y,mCAad,IAAMyC,EDrER,SAAiCzC,GACtC,IAAMC,EAAY,GAClB,GAAGD,EAAME,QAAS,EAAG,OAAOF,EAC5B,IAAI,IAAIc,EAAE,EAAEA,EAAEd,EAAME,OAAO,EAAEY,IAC7B,IAAI,IAAID,EAAE,EAAEA,EAAEb,EAAME,OAAO,EAAEY,EAAED,IAC7BZ,EAAWc,KAAK,CAACF,EAAEA,EAAE,IACrBZ,EAAWc,KAAK,CAACF,EAAEA,EAAE,IAClBb,EAAMa,IAAIb,EAAMa,EAAE,GACnBZ,EAAWc,KAAK,CAACF,EAAEA,EAAE,EAAEb,EAAMa,GAAGb,EAAMa,EAAE,MAIxCZ,EAAWc,KAAK,CAACF,EAAEA,EAAE,EAAEb,EAAMa,EAAE,GAAGb,EAAMa,KAExCb,EAAMa,GAAIb,EAAMa,GAAGb,EAAMa,EAAE,GAC3Bb,EAAMa,EAAE,GAAGb,EAAMa,GAAGb,EAAMa,EAAE,GAC5Bb,EAAMa,GAAGb,EAAMa,GAAGb,EAAMa,EAAE,IAI9B,OAAOZ,ECiDqByC,CAAwBrB,KAAKD,MAAMpB,OAExDqB,KAAKsB,QAAQF,K,8BAOVxC,GACN,IADkB,IAAD,WACRY,GACP,IAAM+B,EAAYb,SAASc,uBAAuB,aAElD,GADsBhC,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACViC,EADU,KACCC,EADD,KAEXC,EAAcJ,EAAUE,GAAWG,MACnCC,EAAcN,EAAUG,GAAWE,MACnCE,EAAQtC,EAAI,IAAM,EAxGV,OADF,YA0GZuC,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC7BtC,EAAII,QAEPmC,YAAW,WAAO,IAAD,cACyCnD,EAAWY,GADpD,GACRiC,EADQ,KACGC,EADH,KACcO,EADd,KAC2BC,EAD3B,KAETP,EAAcJ,EAAUE,GAAWG,MACnCC,EAAcN,EAAUG,GAAWE,MACzCD,EAAYQ,OAAZ,UAAwBF,EAAxB,MACAJ,EAAYM,OAAZ,UAAwBD,EAAxB,QACC1C,EAAII,IAnBFJ,EAAE,EAAGA,EAAEZ,EAAWC,OAAOW,IAAK,EAA9BA,K,kCA8BP,IAHA,IAAMZ,EAAaF,EAAuBsB,KAAKD,MAAMpB,OAD7C,WAICa,GACP,IAAM+B,EAAYb,SAASc,uBAAuB,aAElD,GADsBhC,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACViC,EADU,KACCC,EADD,KAEXC,EAAcJ,EAAUE,GAAWG,MACnCC,EAAcN,EAAUG,GAAWE,MACnCE,EAAQtC,EAAI,IAAM,EAtIZ,OADF,YAwIVuC,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC7BtC,EAAII,QAEPmC,YAAW,WAAO,IAAD,cACgBnD,EAAWY,GAD3B,GACRiC,EADQ,KACGW,EADH,KAEKb,EAAUE,GAAWG,MAC7BO,OAAZ,UAAwBC,EAAxB,QACC5C,EAAII,IAjBFJ,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,+BAwCJ,IAAD,OACGb,EAASqB,KAAKD,MAAdpB,MACX,OACI,6BACA,yBAAK0D,UAAU,mBACd1D,EAAM2D,KAAI,SAAC1B,EAAO2B,GAAR,OACT,yBACEF,UAAU,YACVlC,IAAKoC,EACLX,MAAO,CACLI,gBAlLQ,YAmLRG,OAAO,GAAD,OAAKvB,EAAL,YAGZ,yBAAKyB,UAAU,YAAYT,MAAO,CAC5BI,gBAvLQ,YAwLRG,OAAO,YAGb,6BACA,2BAAOK,IAAI,SAAX,oBACA,4BAAQC,KAAK,QAAQC,GAAG,mBAAmBC,SAAU,kBAAI,EAAKC,gBAC9D,4BAAQhC,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAOiC,UAAQ,GAA7B,YACA,4BAAQjC,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,cAGA,4BAAQkC,QAAS,kBAAM,EAAK7C,eAA5B,sBAEA,4BAAQ6C,QAAS,kBAAM,EAAKvC,eAA5B,eACA,4BAAQuC,QAAS,kBAAM,EAAKxC,cAA5B,oB,GAhMqByC,a,MCJdC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCFNY,IAASC,OAAO,kBAAC,EAAD,MAAQxC,SAASC,eAAe,W","file":"static/js/main.b1fb1307.chunk.js","sourcesContent":["export function getSelectionSortAnimations(array){\r\n  const animations = [];\r\n  if(array.length<=1) return array;\r\n  for(let i=0;i<array.length-1;i++){\r\n    let iMin = i;\r\n    for(let j=i+1;i<array.length;j++){\r\n      animations.push([i,j])\r\n      animations.push([i,j])\r\n      if(array[j]<array[iMin]){\r\n         animations.push([i,j,array[j],array[i]])\r\n          iMin=j; \r\n      }\r\n      else\r\n      animations.push([i,j,array[i],array[j]])\r\n    }\r\n    array[i]= array[i]+array[iMin]\r\n    array[iMin]=array[i]-array[iMin]\r\n    array[i]=array[i]-array[iMin]\r\n  }\r\n  return animations;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getBubbleSortAnimations(array){\r\n  const animations =[];\r\n  if(array.length <=1) return array;\r\n  for(let j=0;j<array.length-1;j++){\r\n  for(let i=0;i<array.length-1-j;i++){\r\n    animations.push([i,i+1])\r\n    animations.push([i,i+1])\r\n    if(array[i]<=array[i+1]){\r\n      animations.push([i,i+1,array[i],array[i+1]])\r\n      \r\n    }\r\n    else{\r\n      animations.push([i,i+1,array[i+1],array[i]])\r\n      \r\n      array[i]= array[i]+array[i+1]\r\n      array[i+1]=array[i]-array[i+1]\r\n      array[i]=array[i]-array[i+1]\r\n    }\r\n   }   \r\n  }\r\n  return animations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React, {Component} from 'react'\r\nimport {getBubbleSortAnimations, getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './AlanVisualizer.css';\r\nimport alanBtn from '@alan-ai/alan-sdk-web'\r\n\r\n//let vw = document.documentElement.clientWidth;\r\nlet ANIMATION_SPEED_MS = 4;\r\n//const JUDGE_COLOR = 'lightgreen';\r\nconst PRIMARY_COLOR = 'lightblue';\r\nconst SECONDARY_COLOR = 'blue';\r\n//const abc = 'green';\r\n\r\n\r\n\r\nconst alanKey = '9f9f72618c488deabcd416fd731d39162e956eca572e1d8b807a3e2338fdd0dc/stage';\r\n\r\nclass AlanVisualizer extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             array: [],\r\n        };\r\n    }\r\n    \r\n    \r\n    componentDidMount(){\r\n        this.resetArray();\r\n        //console.log(ANIMATION_SPEED_MS)\r\n        //console.log(this.state.array)\r\n        alanBtn({\r\n            key: alanKey,\r\n            onCommand: ({command}) =>{\r\n                if(command === 'generatenewarray'){\r\n                    this.resetArray();\r\n                    //alert('Bubble sorting the array')\r\n                }\r\n                else if(command === 'mergesortarray'){\r\n                    this.mergeSort();\r\n                    //alert('Merge sorting the array')\r\n                }\r\n                else if(command === 'bubblesortarray'){\r\n                  this.bubbleSort();\r\n                  //alert('Merge sorting the array')\r\n                }\r\n                else if(command === 'selectionsortarray'){\r\n                  this.selectionSort();\r\n                  //alert('Merge sorting the array')\r\n                }\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    updateSpeed(){\r\n      let speed = document.getElementById(\"aSpeedController\");\r\n      if(speed.value === \"inst\"){\r\n        ANIMATION_SPEED_MS = 0\r\n      }\r\n      if(speed.value === \"fast\"){\r\n        ANIMATION_SPEED_MS = 1\r\n      }\r\n      if(speed.value === \"modr\"){\r\n        ANIMATION_SPEED_MS = 4\r\n      }\r\n      if(speed.value === \"slow\"){\r\n        ANIMATION_SPEED_MS = 50\r\n      }\r\n      if(speed.value === \"vslow\"){\r\n        ANIMATION_SPEED_MS = 800\r\n      }\r\n    }\r\n\r\n\r\n \r\n\r\n    resetArray() {\r\n        const array = [];\r\n        let NUMBER_OF_ARRAY_BARS = Math.floor((document.documentElement.clientWidth)/24)+2;\r\n        //console.log(NUMBER_OF_ARRAY_BARS);\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n          array.push(randomIntFromInterval(5, 400));\r\n        }\r\n        this.setState({array});\r\n      }\r\n\r\n\r\n    // selectionSort() {\r\n    //   const ssanimations = getSelectionSortAnimations(this.state.array);\r\n    //   //alert('ssanimations')\r\n    //   this.animate(ssanimations);\r\n    // }\r\n\r\n\r\n\r\n    bubbleSort() {\r\n         const bsanimations = getBubbleSortAnimations(this.state.array);\r\n         //console.log(bsanimations)\r\n         this.animate(bsanimations);\r\n         //console.log(animations)\r\n         \r\n    }\r\n\r\n    \r\n\r\n    animate(animations){\r\n      for( let i=0; i<animations.length;i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, barTwoIdx, shortHeight, tallHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            barOneStyle.height = `${shortHeight}px`;\r\n            barTwoStyle.height = `${tallHeight}px`;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        }\r\n       }\r\n    }\r\n\r\n\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        //console.log(animations)\r\n        \r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n\r\n      }\r\n    \r\n      // testSortingAlgorithms() {\r\n      //   for (let i = 0; i < 100; i++) {\r\n      //     const array = [];\r\n      //     const length = randomIntFromInterval(1, 100);\r\n      //     for (let i = 0; i < length; i++) {\r\n      //       array.push(randomIntFromInterval(-100, 100));\r\n      //     }\r\n      //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      //     const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n    return (\r\n        <div>\r\n        <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <div className=\"array-bar\" style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `403px`,\r\n            }}></div>\r\n        </div>\r\n        <div>\r\n        <label for=\"speed\">Animation Speed:</label>\r\n        <select name=\"speed\" id=\"aSpeedController\" onChange={()=>this.updateSpeed()}>\r\n        <option value=\"inst\">Instant</option>\r\n        <option value=\"fast\">Fast</option>\r\n        <option value=\"modr\" selected>Moderate</option>\r\n        <option value=\"slow\">Slow</option>\r\n        <option value=\"vslow\">Very Slow</option>\r\n        </select>\r\n       \r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        {/* <button onClick={() => this.selectionSort()}>Selection Sort</button> */}\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n         \r\n        {/*<button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n        </div>\r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n  \r\n// function arraysAreEqual(arrayOne, arrayTwo) {\r\n//     if (arrayOne.length !== arrayTwo.length) return false;\r\n//     for (let i = 0; i < arrayOne.length; i++) {\r\n//       if (arrayOne[i] !== arrayTwo[i]) {\r\n//         return false;\r\n//       }\r\n//     }\r\n//     return true;\r\n// }\r\n\r\nexport default AlanVisualizer\r\n","import React from 'react';\nimport AlanVisualizer from './SortingVisualizer/AlanVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlanVisualizer></AlanVisualizer>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}