{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/AlanVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","ANIMATION_SPEED_MS","AlanVisualizer","props","state","this","resetArray","alanBtn","key","onCommand","command","mergeSort","bubbleSort","selectionSort","insertionSort","speed","document","getElementById","value","min","max","NUMBER_OF_ARRAY_BARS","documentElement","clientWidth","random","setState","min_idx","temp","getSelectionSortAnimations","animate","getBubbleSortAnimations","hole","getInsertionSortAnimations","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","shortHeight","tallHeight","height","newHeight","className","map","idx","name","id","onChange","updateSpeed","selected","onClick","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.a6fef237.chunk.js","sourcesContent":["export function getSelectionSortAnimations(array){\r\n  const animations = [];\r\n  if(array.length<=1) return array; \r\n  for (let i = 0; i < array.length-1; i++)  \r\n    {  \r\n        let min_idx = i;  \r\n        for (let j = i+1; j < array.length; j++) { \r\n        animations.push([i,j])\r\n        animations.push([i,j])\r\n        if (array[j] < array[min_idx]){  \r\n            animations.push([i,j,array[j],array[min_idx]])\r\n            min_idx = j;  \r\n          }\r\n        else{\r\n            animations.push([i,j,array[min_idx],array[j]])\r\n          }\r\n        }\r\n        let temp = array[i];\r\n        array[i] = array[min_idx];\r\n        array[min_idx] = temp;\r\n    }\r\n  return animations;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getBubbleSortAnimations(array){\r\n  const animations =[];\r\n  if(array.length <=1) return array;\r\n  for(let j=0;j<array.length-1;j++){\r\n  for(let i=0;i<array.length-1-j;i++){\r\n    animations.push([i,i+1])\r\n    animations.push([i,i+1])\r\n    if(array[i]<=array[i+1]){\r\n      animations.push([i,i+1,array[i],array[i+1]])\r\n      \r\n    }\r\n    else{\r\n      animations.push([i,i+1,array[i+1],array[i]])\r\n      \r\n      array[i]= array[i]+array[i+1]\r\n      array[i+1]=array[i]-array[i+1]\r\n      array[i]=array[i]-array[i+1]\r\n    }\r\n   }   \r\n  }\r\n  return animations;\r\n}\r\n\r\n\r\nexport function getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    for(let i=1;i<array.length;i++){\r\n      let value = array[i];\r\n      let hole = i;\r\n      while(hole>0 && array[hole-1]>value){\r\n        animations.push([hole,hole-1])\r\n        animations.push([hole,hole-1])\r\n          animations.push([hole-1,hole,array[hole],array[hole-1]])\r\n          let temp= array[hole]\r\n          array[hole]=array[hole-1];\r\n          array[hole-1]=temp\r\n        hole--;\r\n      }\r\n      array[hole]=value;\r\n    }\r\n    return animations;\r\n\r\n}\r\n\r\n\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React, {Component} from 'react'\r\nimport {getSelectionSortAnimations, getBubbleSortAnimations, getInsertionSortAnimations, getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './AlanVisualizer.css';\r\nimport alanBtn from '@alan-ai/alan-sdk-web'\r\n\r\n\r\nlet ANIMATION_SPEED_MS = 4;\r\n\r\nconst PRIMARY_COLOR = 'lightblue';\r\nconst SECONDARY_COLOR = 'blue';\r\n\r\n\r\n\r\n\r\nconst alanKey = '9f9f72618c488deabcd416fd731d39162e956eca572e1d8b807a3e2338fdd0dc/stage';\r\n\r\nclass AlanVisualizer extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             array: [],\r\n        };\r\n    }\r\n    \r\n    \r\n    componentDidMount(){\r\n        this.resetArray();\r\n        alanBtn({\r\n            key: alanKey,\r\n            onCommand: ({command}) =>{\r\n                if(command === 'generatenewarray'){\r\n                    this.resetArray();\r\n                }\r\n                else if(command === 'mergesortarray'){\r\n                    this.mergeSort();\r\n                }\r\n                else if(command === 'bubblesortarray'){\r\n                  this.bubbleSort();\r\n                }\r\n                else if(command === 'selectionsortarray'){\r\n                  this.selectionSort();\r\n                }\r\n                else if(command === 'insertionsortarray'){\r\n                  this.insertionSort();\r\n                }\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    updateSpeed(){\r\n      let speed = document.getElementById(\"aspeed\");\r\n      if(speed.value === \"inst\"){\r\n        ANIMATION_SPEED_MS = 0\r\n      }\r\n      if(speed.value === \"fast\"){\r\n        ANIMATION_SPEED_MS = 1\r\n      }\r\n      if(speed.value === \"modr\"){\r\n        ANIMATION_SPEED_MS = 4\r\n      }\r\n      if(speed.value === \"slow\"){\r\n        ANIMATION_SPEED_MS = 50\r\n      }\r\n      if(speed.value === \"vslow\"){\r\n        ANIMATION_SPEED_MS = 800\r\n      }\r\n    }\r\n\r\n\r\n \r\n\r\n    resetArray() {\r\n        const array = [];\r\n        let NUMBER_OF_ARRAY_BARS = Math.floor((document.documentElement.clientWidth)/24)+2;\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n          array.push(randomIntFromInterval(5, 340));\r\n        }\r\n        this.setState({array});\r\n      }\r\n\r\n\r\n    selectionSort() {\r\n      const animations = getSelectionSortAnimations(this.state.array);\r\n      this.animate(animations);\r\n    }\r\n\r\n\r\n\r\n    bubbleSort() {\r\n         const animations = getBubbleSortAnimations(this.state.array);\r\n         this.animate(animations);\r\n    }\r\n\r\n    insertionSort(){\r\n      const animations = getInsertionSortAnimations(this.state.array);\r\n      this.animate(animations);\r\n      \r\n    }\r\n    \r\n\r\n    animate(animations){\r\n      for( let i=0; i<animations.length;i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, barTwoIdx, shortHeight, tallHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            barOneStyle.height = `${shortHeight}px`;\r\n            barTwoStyle.height = `${tallHeight}px`;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        }\r\n       }\r\n    }\r\n\r\n\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        \r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n\r\n      }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n    return (\r\n        <div>\r\n        \r\n        <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <div className=\"array-bar\" style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `343px`,\r\n            }}></div>\r\n        </div>\r\n        \r\n        <div>\r\n        <select name=\"speed\" id=\"aspeed\" onChange={()=>this.updateSpeed()}>\r\n        <option value=\"inst\">Instant</option>\r\n        <option value=\"fast\">Fast</option>\r\n        <option value=\"modr\" selected>Moderate</option>\r\n        <option value=\"slow\">Slow</option>\r\n        <option value=\"vslow\">Very Slow</option>\r\n        </select>\r\n        \r\n        <button id=\"gbtn\" className=\"btn1\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button className=\"btn1\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n        <button className=\"btn1\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button className=\"btn1\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n        <button className=\"btn1\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        \r\n        </div>\r\n        <br/>\r\n        <p><b>Help: </b>After tapping the mic button, Say Hi to Alan or Speak up the text witten on the buttons.</p>\r\n        {/*<button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n        \r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n  \r\n\r\nexport default AlanVisualizer\r\n","import React from 'react';\nimport AlanVisualizer from './SortingVisualizer/AlanVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlanVisualizer></AlanVisualizer>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}