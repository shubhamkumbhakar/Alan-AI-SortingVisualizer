{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/AlanVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","AlanVisualizer","props","state","this","resetArray","alanBtn","key","onCommand","command","mergeSort","min","max","NUMBER_OF_ARRAY_BARS","document","documentElement","clientWidth","random","setState","temp","getBubbleSortAnimations","console","log","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","onClick","bubbleSort","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7eca919d.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n\r\nexport function getBubbleSortAnimations(array){\r\n  const animations =[];\r\n  if(array.length <=1) return array;\r\n  for(let j=0;j<array.length-1;j++){\r\n  for(let i=0;i<array.length-1-j;i++){\r\n    animations.push([i,i+1])\r\n    animations.push([i,i+1])\r\n    if(array[i]<array[i+1]){\r\n      animations.push([i,array[i]])\r\n      \r\n    }\r\n    else{\r\n      \r\n      let temp = array[i]\r\n      array[i]=array[i+1]\r\n      array[i+1]=temp\r\n      animations.push([i,array[i]])\r\n      // array[i]= array[i]+array[i+1]\r\n      // array[i+1]=array[i]-array[i+1]\r\n      // array[i]=array[i]-array[i+1]\r\n    }\r\n   }   \r\n  }\r\n  return animations;\r\n}\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React, {Component} from 'react'\r\nimport {getBubbleSortAnimations, getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './AlanVisualizer.css';\r\nimport alanBtn from '@alan-ai/alan-sdk-web'\r\n\r\n//let vw = document.documentElement.clientWidth;\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\nconst PRIMARY_COLOR = 'lightblue';\r\nconst SECONDARY_COLOR = 'blue';\r\n//const abc = 'green';\r\n\r\n\r\nconst alanKey = '9f9f72618c488deabcd416fd731d39162e956eca572e1d8b807a3e2338fdd0dc/stage';\r\n\r\nclass AlanVisualizer extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             array: [],\r\n        };\r\n    }\r\n    \r\n    \r\n    componentDidMount(){\r\n        this.resetArray();\r\n        //console.log(this.state.array)\r\n        alanBtn({\r\n            key: alanKey,\r\n            onCommand: ({command}) =>{\r\n                if(command === 'generatenewarray'){\r\n                    this.resetArray();\r\n                    //alert('Bubble sorting the array')\r\n                }\r\n                else if(command === 'mergesortarray'){\r\n                    this.mergeSort();\r\n                    //alert('Merge sorting the array')\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        let NUMBER_OF_ARRAY_BARS = Math.floor((document.documentElement.clientWidth)/24)+2;\r\n        //console.log(NUMBER_OF_ARRAY_BARS);\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n          array.push(randomIntFromInterval(5, 400));\r\n        }\r\n        this.setState({array});\r\n      }\r\n\r\n    bubbleSort() {\r\n         const animations = getBubbleSortAnimations(this.state.array);\r\n         console.log(animations)\r\n         for( let i=0; i<animations.length;i++){\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n         }\r\n    }\r\n\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        console.log(animations)\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n\r\n      }\r\n    \r\n      // testSortingAlgorithms() {\r\n      //   for (let i = 0; i < 100; i++) {\r\n      //     const array = [];\r\n      //     const length = randomIntFromInterval(1, 100);\r\n      //     for (let i = 0; i < length; i++) {\r\n      //       array.push(randomIntFromInterval(-100, 100));\r\n      //     }\r\n      //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      //     const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n      //   }\r\n      // }\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n    return (\r\n        <div>\r\n        <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <div className=\"array-bar\" style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `403px`,\r\n            }}></div>\r\n        </div>\r\n        <div>\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n         \r\n        {/*<button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n        </div>\r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n  \r\n// function arraysAreEqual(arrayOne, arrayTwo) {\r\n//     if (arrayOne.length !== arrayTwo.length) return false;\r\n//     for (let i = 0; i < arrayOne.length; i++) {\r\n//       if (arrayOne[i] !== arrayTwo[i]) {\r\n//         return false;\r\n//       }\r\n//     }\r\n//     return true;\r\n// }\r\n\r\nexport default AlanVisualizer\r\n","import React from 'react';\nimport AlanVisualizer from './SortingVisualizer/AlanVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlanVisualizer></AlanVisualizer>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}